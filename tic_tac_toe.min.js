export let board=[[" "," "," "],[" "," "," "],[" "," "," "]];export let currentPlayer="X";export let gameWon=!1;export let gameDraw=!1;export let inputCorrect=!0;export let fieldFilled=!1;let movesCounter=0;export let inputCounter=0;let showScore=!1,showRules=!1;export let xWon=0;export let oWon=0;export let endedDraw=0;export let coordinatColumn;export let coordinatRow;let gameVSComputer=!1,computerDidTurn=!1,rules='We play the game with the official rules and no modifications:\n- X places its mark first in the first round\n- The looser of the last game starts the game, which is then\n- played in an endless alternating order\n- Players must mark its position within the nine spaces\n- The first player to get 3 of her marks in a row (up, down,\n- across, or diagonally) is the winner\n- When all 9 squares are full, the game is over. If no player has 3\n- marks in a row, the game ends in a tie. X starts the next game\n\nKeycode:\n"r" = show rules\n"p" = show stats\n"e" = end the game';const readline=require("readline");export const rl=readline.createInterface({input:process.stdin,output:process.stdout});function chooseOpponent(){console.clear(),rl.question("You want to play against a computer (c) or a human (h):",e=>{"c"===e?(gameVSComputer=!0,playVsComputer()):"h"===e?(gameVSComputer=!1,playGame()):(console.clear(),chooseOpponent())})}function playGame(){firstRound(),"O"===currentPlayer&&!0===gameVSComputer?playVsComputer():rl.question(currentPlayer+": Please enter the position of your mark (Row:Column):",e=>{if(!showScore&&(checkInput(e),inputCorrect)){updateBoard(e[0]-1,e[2]-1),fieldFilled||(printBoard(),checkWinAndDraw(),gameLoop())}})}function firstRound(){0===movesCounter&&0===inputCounter&&(console.clear(),console.log('If you want to look up the rules, you can press "r" during the game to show them.'),inputCounter++,printBoard())}chooseOpponent();export function printBoard(){console.log(" "),console.log("  "+board[0][0]+" | "+board[0][1]+" | "+board[0][2]),console.log(" -----------"),console.log("  "+board[1][0]+" | "+board[1][1]+" | "+board[1][2]),console.log(" -----------"),console.log("  "+board[2][0]+" | "+board[2][1]+" | "+board[2][2]),console.log(" ")};export function checkInput(e){checkInputLength(e),inputCorrect&&checkInputFormat(e)};export function checkInputLength(e){3!==e.length?(console.clear(),console.error('The inserted field is not valid. Try again:\nExample: "2:2" places the X in the  middle center field'),inputCorrect=!1,printBoard(),playGame()):inputCorrect=!0};export function checkInputFormat(e){1!=e[0]&&2!=e[0]&&3!=e[0]?(console.clear(),console.error('The inserted field is not valid. Try again:\nExample: "2:2" places the X in the  middle center field'),inputCorrect=!1,printBoard(),playGame()):1!=e[2]&&2!=e[2]&&3!=e[2]?(console.clear(),console.error('The inserted field is not valid. Try again:\nExample: "2:2" places the X in the  middle center field'),inputCorrect=!1,printBoard(),playGame()):":"!=e[1]?(console.clear(),console.error('The inserted field is not valid. Try again:\nExample: "2:2" places the X in the  middle center field'),inputCorrect=!1,printBoard(),playGame()):inputCorrect=!0};function checkWinAndDraw(){checkWin(),checkDraw()}export function checkWin(){for(let e=0;e<3;e++){if(board[e][0]===board[e][1]&&board[e][1]===board[e][2]&&" "!==board[e][0])return void(gameWon=!0);if(board[0][e]===board[1][e]&&board[1][e]===board[2][e]&&" "!==board[0][e])return void(gameWon=!0)}(board[0][0]!==board[1][1]||board[1][1]!==board[2][2]||" "===board[0][0])&&(board[0][2]!==board[1][1]||board[1][1]!==board[2][0]||" "===board[0][2])||(gameWon=!0)};export function checkDraw(){9!==++movesCounter||gameWon||(gameDraw=!0)};export function updateBoard(e,o){console.clear()," "!=board[e][o]?(console.clear(),console.error("The inserted field is already taken. Try again:"),fieldFilled=!0,printBoard(),playGame()):(fieldFilled=!1,board[e][o]=currentPlayer)};function gameLoop(){gameWon||gameDraw?!gameWon&&gameDraw?(updateStats(),newGame(`The game ended in a draw.\nStats: X-wins: ${xWon}, O-wins: ${oWon}, draw: ${endedDraw}                        \nDo you want to start a new game (Press "Enter")? `)):(updateStats(),newGame(`${currentPlayer}: Won the game. \nStats: X-wins: ${xWon}, O-wins: ${oWon}, draw: ${endedDraw}\nDo you want to start a new game? (Press "Enter")`)):(switchPlayer(),playGame())}export function switchPlayer(){currentPlayer="X"===currentPlayer?"O":"X"};export function updateStats(){gameWon?"X"===currentPlayer?xWon++:oWon++:gameDraw&&!gameWon&&endedDraw++};export function newGame(e){rl.question(e,()=>{resetEverything(),playGame()})};export function resetEverything(){gameWon=!1,gameDraw=!1,computerDidTurn=!1,switchPlayer(),console.clear(),movesCounter=0,inputCounter=0,board=[[" "," "," "],[" "," "," "],[" "," "," "]]};function playVsComputer(){gameVSComputer=!0,"X"===currentPlayer?playGame():(computerDidTurn=!1,computerWinandLose("O"),computerDidTurn||computerWinandLose("X"),computerDidTurn||creatRandomCoordinats(),fieldFilled||(printBoard(),checkWinAndDraw(),gameLoop()))}readline.emitKeypressEvents(process.stdin),process.stdin.on("keypress",e=>{"p"===e?(showScore=!0,console.clear(),console.log(`Stats: X-wins: ${xWon}, O-wins: ${oWon}, draw: ${endedDraw}\nPress "Enter" to continue`)):"\r"===e&&showScore&&(showScore=!1,console.clear(),rl.clearLine(-1),printBoard(),playGame()),"r"===e?(showScore=!0,console.clear(),console.log(`${rules}\n\nPress "Enter" to continue`)):"\r"===e&&showRules?(showRules=!1,console.clear(),rl.clearLine(-1),printBoard(),playGame()):"e"===e&&process.exit()});export function creatRandomCoordinats(){coordinatRow=Math.floor(3*Math.random()),coordinatColumn=Math.floor(3*Math.random())," "!==board[coordinatRow][coordinatColumn]?creatRandomCoordinats():updateBoard(coordinatRow,coordinatColumn)};function computerWinandLose(e){for(let o=0;o<3;o++)checkHorizontal(o,e),checkVertical(o,e);checkDiagonal(e)}export function checkHorizontal(e,o){return board[e][0]!==o||board[e][2]!==o||" "!==board[e][1]||computerDidTurn?board[e][0]!==o||board[e][1]!==o||" "!==board[e][2]||computerDidTurn?board[e][1]!==o||board[e][2]!==o||" "!==board[e][0]||computerDidTurn?void 0:(updateBoard(e,0),void(computerDidTurn=!0)):(updateBoard(e,2),void(computerDidTurn=!0)):(updateBoard(e,1),void(computerDidTurn=!0))};export function checkVertical(e,o){return board[0][e]!==o||board[2][e]!==o||" "!==board[1][e]||computerDidTurn?board[0][e]!==o||board[1][e]!==o||" "!==board[2][e]||computerDidTurn?board[1][e]!==o||board[2][e]!==o||" "!==board[0][e]||computerDidTurn?void 0:(updateBoard(0,e),void(computerDidTurn=!0)):(updateBoard(2,e),void(computerDidTurn=!0)):(updateBoard(1,e),void(computerDidTurn=!0))};export function checkDiagonal(e){return board[0][0]!==e||board[1][1]!==e||" "!==board[2][2]||computerDidTurn?board[0][0]!==e||board[2][2]!==e||" "!==board[1][1]||computerDidTurn?board[1][1]!==e||board[2][2]!==e||" "!==board[0][0]||computerDidTurn?board[0][2]!==e||board[2][0]!==e||" "!==board[1][1]||computerDidTurn?board[1][1]!==e||board[2][0]!==e||" "!==board[0][2]||computerDidTurn?board[1][1]!==e||board[0][2]!==e||" "!==board[2][0]||computerDidTurn?void 0:(updateBoard(2,0),void(computerDidTurn=!0)):(updateBoard(0,2),void(computerDidTurn=!0)):(updateBoard(1,1),void(computerDidTurn=!0)):(updateBoard(0,0),void(computerDidTurn=!0)):(updateBoard(1,1),void(computerDidTurn=!0)):(updateBoard(2,2),void(computerDidTurn=!0))};